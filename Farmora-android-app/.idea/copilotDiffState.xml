<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/farmora/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/farmora/MainActivity.kt" />
              <option name="originalContent" value="package com.farmora&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import com.farmora.navigation.FarmoraNavigation&#10;import com.farmora.ui.theme.FarmoraTheme&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            FarmoraTheme {&#10;                    FarmoraNavigation(modifier = Modifier.padding())&#10;&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.farmora&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import com.farmora.navigation.FarmoraNavigation&#10;import com.farmora.presentation.components.GlobalOfflineBannerWrapper&#10;import com.farmora.ui.theme.FarmoraTheme&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            FarmoraTheme {&#10;                GlobalOfflineBannerWrapper {&#10;                    FarmoraNavigation(modifier = Modifier.padding())&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/farmora/data/network/NetworkConnectivityManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/farmora/data/network/NetworkConnectivityManager.kt" />
              <option name="updatedContent" value="package com.farmora.data.network&#10;&#10;import android.content.Context&#10;import android.net.ConnectivityManager&#10;import android.net.Network&#10;import android.net.NetworkCapabilities&#10;import android.net.NetworkRequest&#10;import com.farmora.domain.model.NetworkStatus&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.channels.awaitClose&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.callbackFlow&#10;import kotlinx.coroutines.flow.distinctUntilChanged&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class NetworkConnectivityManager @Inject constructor(&#10;    @ApplicationContext private val context: Context&#10;) {&#10;    &#10;    private val connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager&#10;    &#10;    fun observeNetworkStatus(): Flow&lt;NetworkStatus&gt; = callbackFlow {&#10;        val networkCallback = object : ConnectivityManager.NetworkCallback() {&#10;            override fun onAvailable(network: Network) {&#10;                super.onAvailable(network)&#10;                trySend(NetworkStatus.Available)&#10;            }&#10;            &#10;            override fun onLost(network: Network) {&#10;                super.onLost(network)&#10;                trySend(NetworkStatus.Unavailable)&#10;            }&#10;            &#10;            override fun onCapabilitiesChanged(&#10;                network: Network,&#10;                networkCapabilities: NetworkCapabilities&#10;            ) {&#10;                super.onCapabilitiesChanged(network, networkCapabilities)&#10;                val hasInternet = networkCapabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET) &amp;&amp;&#10;                        networkCapabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_VALIDATED)&#10;                &#10;                if (hasInternet) {&#10;                    trySend(NetworkStatus.Available)&#10;                } else {&#10;                    trySend(NetworkStatus.Unavailable)&#10;                }&#10;            }&#10;        }&#10;        &#10;        val networkRequest = NetworkRequest.Builder()&#10;            .addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)&#10;            .build()&#10;        &#10;        connectivityManager.registerNetworkCallback(networkRequest, networkCallback)&#10;        &#10;        // Send initial state&#10;        trySend(getCurrentNetworkStatus())&#10;        &#10;        awaitClose {&#10;            connectivityManager.unregisterNetworkCallback(networkCallback)&#10;        }&#10;    }.distinctUntilChanged()&#10;    &#10;    private fun getCurrentNetworkStatus(): NetworkStatus {&#10;        val activeNetwork = connectivityManager.activeNetwork ?: return NetworkStatus.Unavailable&#10;        val networkCapabilities = connectivityManager.getNetworkCapabilities(activeNetwork) ?: return NetworkStatus.Unavailable&#10;        &#10;        return if (networkCapabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET) &amp;&amp;&#10;            networkCapabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_VALIDATED)) {&#10;            NetworkStatus.Available&#10;        } else {&#10;            NetworkStatus.Unavailable&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/farmora/di/NetworkModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/farmora/di/NetworkModule.kt" />
              <option name="updatedContent" value="package com.farmora.di&#10;&#10;import android.content.Context&#10;import com.farmora.data.network.NetworkConnectivityManager&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object NetworkModule {&#10;    &#10;    @Provides&#10;    @Singleton&#10;    fun provideNetworkConnectivityManager(&#10;        @ApplicationContext context: Context&#10;    ): NetworkConnectivityManager {&#10;        return NetworkConnectivityManager(context)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/farmora/presentation/auth/AuthviewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/farmora/presentation/auth/AuthviewModel.kt" />
              <option name="originalContent" value="package com.farmora.presentation.auth&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.farmora.data.local.UserPreferences&#10;import com.farmora.domain.model.AuthResult&#10;import com.farmora.domain.model.NetworkStatus&#10;import com.farmora.domain.repository.AuthRepository&#10;import com.farmora.domain.usecase.GetCurrentUserUseCase&#10;import com.farmora.domain.usecase.IsUserLoggedInUseCase&#10;import com.farmora.domain.usecase.SignInUseCase&#10;import com.farmora.domain.usecase.SignInWithGoogleUseCase&#10;import com.farmora.domain.usecase.SignOutUseCase&#10;import com.farmora.domain.usecase.SignUpUseCase&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.flow.update&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;&#10;data class AuthUiState(&#10;    val isLoading: Boolean = false,&#10;    val isLoggedIn: Boolean = false,&#10;    val user: com.farmora.data.model.User? = null,&#10;    val errorMessage: String? = null,&#10;    val networkStatus: NetworkStatus = NetworkStatus.Unknown,&#10;    val isFirstTime: Boolean = true,&#10;    val showLoginForm: Boolean = false&#10;)&#10;&#10;@HiltViewModel&#10;class AuthviewModel @Inject constructor(&#10;    private val signUpUseCase: SignUpUseCase,&#10;    private val signInUseCase: SignInUseCase,&#10;    private val signInWithGoogleUseCase: SignInWithGoogleUseCase,&#10;    private val signOutUseCase: SignOutUseCase,&#10;    private val getCurrentUserUseCase: GetCurrentUserUseCase,&#10;    private val isUserLoggedInUseCase: IsUserLoggedInUseCase,&#10;    private val authRepository: AuthRepository,&#10;    private val userPreferences: UserPreferences&#10;) : ViewModel(){&#10;    private val _uiState = MutableStateFlow(AuthUiState())&#10;    val uiState: StateFlow&lt;AuthUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        checkAuthStatus()&#10;        observeNetworkStatus()&#10;    }&#10;&#10;    private fun checkAuthStatus() {&#10;        viewModelScope.launch {&#10;            try {&#10;                val isLoggedIn = isUserLoggedInUseCase()&#10;                val user = if (isLoggedIn) getCurrentUserUseCase() else null&#10;                val isFirstTime = userPreferences.isFirstTime.first()&#10;&#10;                _uiState.update { currentState -&gt;&#10;                    currentState.copy(&#10;                        isLoggedIn = isLoggedIn,&#10;                        user = user,&#10;                        isFirstTime = isFirstTime&#10;                    )&#10;                }&#10;&#10;                if (user != null) {&#10;                    userPreferences.saveUser(user)&#10;                }&#10;            } catch (e: Exception) {&#10;                _uiState.update { it.copy(errorMessage = e.message) }&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    private fun observeNetworkStatus() {&#10;        viewModelScope.launch {&#10;            authRepository.getNetworkStatus().collect { status -&gt;&#10;                _uiState.update { it.copy(networkStatus = status) }&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    fun signUp(email: String, password: String, confirmPassword: String, name: String) {&#10;        if (password != confirmPassword) {&#10;            _uiState.update { it.copy(errorMessage = &quot;Passwords do not match&quot;) }&#10;            return&#10;        }&#10;&#10;        if (password.length &lt; 8) {&#10;            _uiState.update { it.copy(errorMessage = &quot;Password must be at least 8 characters&quot;) }&#10;            return&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            _uiState.update { it.copy(isLoading = true, errorMessage = null) }&#10;&#10;            when (val result = signUpUseCase(email, password, name)) {&#10;                is AuthResult.Success -&gt; {&#10;                    userPreferences.saveUser(result.user)&#10;                    userPreferences.setFirstTimeLaunch(false)&#10;                    _uiState.update {&#10;                        it.copy(&#10;                            isLoading = false,&#10;                            isLoggedIn = true,&#10;                            user = result.user,&#10;                            isFirstTime = false&#10;                        )&#10;                    }&#10;                }&#10;                is AuthResult.Error -&gt; {&#10;                    _uiState.update {&#10;                        it.copy(&#10;                            isLoading = false,&#10;                            errorMessage = result.message&#10;                        )&#10;                    }&#10;                }&#10;                else -&gt; {}&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    fun signIn(email: String, password: String) {&#10;        viewModelScope.launch {&#10;            _uiState.update { it.copy(isLoading = true, errorMessage = null) }&#10;&#10;            when (val result = signInUseCase(email, password)) {&#10;                is AuthResult.Success -&gt; {&#10;                    userPreferences.saveUser(result.user)&#10;                    _uiState.update {&#10;                        it.copy(&#10;                            isLoading = false,&#10;                            isLoggedIn = true,&#10;                            user = result.user&#10;                        )&#10;                    }&#10;                }&#10;                is AuthResult.Error -&gt; {&#10;                    _uiState.update {&#10;                        it.copy(&#10;                            isLoading = false,&#10;                            errorMessage = result.message&#10;                        )&#10;                    }&#10;                }&#10;                else -&gt; {}&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    fun signInWithGoogle() {&#10;        viewModelScope.launch {&#10;            _uiState.update { it.copy(isLoading = true, errorMessage = null) }&#10;&#10;            when (val result = signInWithGoogleUseCase()) {&#10;                is AuthResult.Success -&gt; {&#10;                    userPreferences.saveUser(result.user)&#10;                    _uiState.update {&#10;                        it.copy(&#10;                            isLoading = false,&#10;                            isLoggedIn = true,&#10;                            user = result.user&#10;                        )&#10;                    }&#10;                }&#10;                is AuthResult.Error -&gt; {&#10;                    _uiState.update {&#10;                        it.copy(&#10;                            isLoading = false,&#10;                            errorMessage = result.message&#10;                        )&#10;                    }&#10;                }&#10;                else -&gt; {}&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    fun signOut() {&#10;        viewModelScope.launch {&#10;            _uiState.update { it.copy(isLoading = true) }&#10;&#10;            when (signOutUseCase()) {&#10;                is AuthResult.Success -&gt; {&#10;                    userPreferences.clearUserData()&#10;                    _uiState.update {&#10;                        it.copy(&#10;                            isLoading = false,&#10;                            isLoggedIn = false,&#10;                            user = null&#10;                        )&#10;                    }&#10;                }&#10;                is AuthResult.Error -&gt; {&#10;                    _uiState.update { it.copy(isLoading = false) }&#10;                }&#10;                else -&gt; {}&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    fun clearError() {&#10;        _uiState.update { it.copy(errorMessage = null) }&#10;    }&#10;&#10;    fun continueToLogin() {&#10;        _uiState.update { it.copy(showLoginForm = true) }&#10;    }&#10;&#10;    fun resetLoginForm() {&#10;        _uiState.update { it.copy(showLoginForm = false) }&#10;    }&#10;&#10;&#10;}" />
              <option name="updatedContent" value="package com.farmora.presentation.auth&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.farmora.data.local.UserPreferences&#10;import com.farmora.data.network.NetworkConnectivityManager&#10;import com.farmora.domain.model.AuthResult&#10;import com.farmora.domain.model.NetworkStatus&#10;import com.farmora.domain.repository.AuthRepository&#10;import com.farmora.domain.usecase.GetCurrentUserUseCase&#10;import com.farmora.domain.usecase.IsUserLoggedInUseCase&#10;import com.farmora.domain.usecase.SignInUseCase&#10;import com.farmora.domain.usecase.SignInWithGoogleUseCase&#10;import com.farmora.domain.usecase.SignOutUseCase&#10;import com.farmora.domain.usecase.SignUpUseCase&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.flow.update&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;&#10;data class AuthUiState(&#10;    val isLoading: Boolean = false,&#10;    val isLoggedIn: Boolean = false,&#10;    val user: com.farmora.data.model.User? = null,&#10;    val errorMessage: String? = null,&#10;    val networkStatus: NetworkStatus = NetworkStatus.Unknown,&#10;    val isFirstTime: Boolean = true,&#10;    val showLoginForm: Boolean = false&#10;)&#10;&#10;@HiltViewModel&#10;class AuthviewModel @Inject constructor(&#10;    private val signUpUseCase: SignUpUseCase,&#10;    private val signInUseCase: SignInUseCase,&#10;    private val signInWithGoogleUseCase: SignInWithGoogleUseCase,&#10;    private val signOutUseCase: SignOutUseCase,&#10;    private val getCurrentUserUseCase: GetCurrentUserUseCase,&#10;    private val isUserLoggedInUseCase: IsUserLoggedInUseCase,&#10;    private val authRepository: AuthRepository,&#10;    private val userPreferences: UserPreferences,&#10;    private val networkConnectivityManager: NetworkConnectivityManager&#10;) : ViewModel(){&#10;    private val _uiState = MutableStateFlow(AuthUiState())&#10;    val uiState: StateFlow&lt;AuthUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        checkAuthStatus()&#10;        observeNetworkStatus()&#10;    }&#10;&#10;    private fun checkAuthStatus() {&#10;        viewModelScope.launch {&#10;            try {&#10;                val isLoggedIn = isUserLoggedInUseCase()&#10;                val user = if (isLoggedIn) getCurrentUserUseCase() else null&#10;                val isFirstTime = userPreferences.isFirstTime.first()&#10;&#10;                _uiState.update { currentState -&gt;&#10;                    currentState.copy(&#10;                        isLoggedIn = isLoggedIn,&#10;                        user = user,&#10;                        isFirstTime = isFirstTime&#10;                    )&#10;                }&#10;&#10;                if (user != null) {&#10;                    userPreferences.saveUser(user)&#10;                }&#10;            } catch (e: Exception) {&#10;                _uiState.update { it.copy(errorMessage = e.message) }&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    private fun observeNetworkStatus() {&#10;        viewModelScope.launch {&#10;            networkConnectivityManager.observeNetworkStatus().collect { status -&gt;&#10;                _uiState.update { it.copy(networkStatus = status) }&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    fun signUp(email: String, password: String, confirmPassword: String, name: String) {&#10;        if (password != confirmPassword) {&#10;            _uiState.update { it.copy(errorMessage = &quot;Passwords do not match&quot;) }&#10;            return&#10;        }&#10;&#10;        if (password.length &lt; 8) {&#10;            _uiState.update { it.copy(errorMessage = &quot;Password must be at least 8 characters&quot;) }&#10;            return&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            _uiState.update { it.copy(isLoading = true, errorMessage = null) }&#10;&#10;            when (val result = signUpUseCase(email, password, name)) {&#10;                is AuthResult.Success -&gt; {&#10;                    userPreferences.saveUser(result.user)&#10;                    userPreferences.setFirstTimeLaunch(false)&#10;                    _uiState.update {&#10;                        it.copy(&#10;                            isLoading = false,&#10;                            isLoggedIn = true,&#10;                            user = result.user,&#10;                            isFirstTime = false&#10;                        )&#10;                    }&#10;                }&#10;                is AuthResult.Error -&gt; {&#10;                    _uiState.update {&#10;                        it.copy(&#10;                            isLoading = false,&#10;                            errorMessage = result.message&#10;                        )&#10;                    }&#10;                }&#10;                else -&gt; {}&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    fun signIn(email: String, password: String) {&#10;        viewModelScope.launch {&#10;            _uiState.update { it.copy(isLoading = true, errorMessage = null) }&#10;&#10;            when (val result = signInUseCase(email, password)) {&#10;                is AuthResult.Success -&gt; {&#10;                    userPreferences.saveUser(result.user)&#10;                    _uiState.update {&#10;                        it.copy(&#10;                            isLoading = false,&#10;                            isLoggedIn = true,&#10;                            user = result.user&#10;                        )&#10;                    }&#10;                }&#10;                is AuthResult.Error -&gt; {&#10;                    _uiState.update {&#10;                        it.copy(&#10;                            isLoading = false,&#10;                            errorMessage = result.message&#10;                        )&#10;                    }&#10;                }&#10;                else -&gt; {}&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    fun signInWithGoogle() {&#10;        viewModelScope.launch {&#10;            _uiState.update { it.copy(isLoading = true, errorMessage = null) }&#10;&#10;            when (val result = signInWithGoogleUseCase()) {&#10;                is AuthResult.Success -&gt; {&#10;                    userPreferences.saveUser(result.user)&#10;                    _uiState.update {&#10;                        it.copy(&#10;                            isLoading = false,&#10;                            isLoggedIn = true,&#10;                            user = result.user&#10;                        )&#10;                    }&#10;                }&#10;                is AuthResult.Error -&gt; {&#10;                    _uiState.update {&#10;                        it.copy(&#10;                            isLoading = false,&#10;                            errorMessage = result.message&#10;                        )&#10;                    }&#10;                }&#10;                else -&gt; {}&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    fun signOut() {&#10;        viewModelScope.launch {&#10;            _uiState.update { it.copy(isLoading = true) }&#10;&#10;            when (signOutUseCase()) {&#10;                is AuthResult.Success -&gt; {&#10;                    userPreferences.clearUserData()&#10;                    _uiState.update {&#10;                        it.copy(&#10;                            isLoading = false,&#10;                            isLoggedIn = false,&#10;                            user = null&#10;                        )&#10;                    }&#10;                }&#10;                is AuthResult.Error -&gt; {&#10;                    _uiState.update { it.copy(isLoading = false) }&#10;                }&#10;                else -&gt; {}&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    fun clearError() {&#10;        _uiState.update { it.copy(errorMessage = null) }&#10;    }&#10;&#10;    fun continueToLogin() {&#10;        _uiState.update { it.copy(showLoginForm = true) }&#10;    }&#10;&#10;    fun resetLoginForm() {&#10;        _uiState.update { it.copy(showLoginForm = false) }&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/farmora/presentation/auth/login/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/farmora/presentation/auth/login/LoginScreen.kt" />
              <option name="originalContent" value="package com.farmora.presentation.auth.login&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Email&#10;import androidx.compose.material.icons.filled.Lock&#10;import androidx.compose.material.icons.filled.Visibility&#10;import androidx.compose.material.icons.filled.VisibilityOff&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Divider&#10;import androidx.compose.material3.DividerDefaults&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.OutlinedTextFieldDefaults&#10;import androidx.compose.material3.Snackbar&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.input.VisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.farmora.domain.model.NetworkStatus&#10;import com.farmora.presentation.auth.AuthviewModel&#10;import com.farmora.presentation.components.OfflineBanner&#10;import com.farmora.ui.theme.Gray500&#10;import com.farmora.ui.theme.Gray600&#10;import com.farmora.ui.theme.Gray700&#10;import com.farmora.ui.theme.Gray800&#10;import com.farmora.ui.theme.Green100&#10;import com.farmora.ui.theme.Green50&#10;import com.farmora.ui.theme.Green600&#10;import com.farmora.ui.theme.Green800&#10;import com.farmora.ui.theme.Warning&#10;&#10;@Composable&#10;fun LoginScreen(&#10;    modifier: Modifier = Modifier,&#10;    onNavigateToSignUp: () -&gt; Unit,&#10;    onNavigateToHome: () -&gt; Unit,&#10;    authViewModel: AuthviewModel = hiltViewModel(),&#10;) {&#10;&#10;    val uiState by authViewModel.uiState.collectAsState()&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var isPasswordVisible by remember { mutableStateOf(false) }&#10;    LocalContext.current&#10;&#10;&#10;    // Navigate to home if logged in&#10;    LaunchedEffect(uiState.isLoggedIn) {&#10;        if (uiState.isLoggedIn) {&#10;            onNavigateToHome()&#10;        }&#10;    }&#10;&#10;    uiState.errorMessage?.let { message -&gt;&#10;        LaunchedEffect(message) {&#10;            authViewModel.clearError()&#10;        }&#10;    }&#10;&#10;&#10;    Box(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                brush = Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        Green100, Green50, Color.White&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        // Offline Banner at the top&#10;        OfflineBanner(&#10;            isVisible = uiState.networkStatus == NetworkStatus.Unavailable,&#10;            modifier = Modifier.align(Alignment.TopCenter)&#10;        )&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp)&#10;                .verticalScroll(rememberScrollState()),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Spacer(modifier = Modifier.height(60.dp))&#10;&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;&#10;            Text(&#10;                text = &quot;Your Smart Farming Assistant&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                color = Green600,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier.padding(top = 8.dp, bottom = 48.dp)&#10;            )&#10;&#10;&#10;            // Login Form&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(), colors = CardDefaults.cardColors(&#10;                    containerColor = Color.White&#10;                ), elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Sign In&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        color = Green800,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 24.dp)&#10;                    )&#10;&#10;                    // Email Field&#10;                    OutlinedTextField(&#10;                        value = email,&#10;                        onValueChange = { email = it },&#10;                        label = { Text(&quot;Email Address&quot;) },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Email,&#10;                                contentDescription = &quot;Email Icon&quot;,&#10;                                tint = Green600&#10;                            )&#10;                        },&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email),&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = Green600,&#10;                            focusedLabelColor = Green600,&#10;                            focusedTextColor = Gray800,&#10;                            unfocusedTextColor = Gray700&#10;                        )&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Password Field&#10;                    OutlinedTextField(&#10;                        value = password,&#10;                        onValueChange = { password = it },&#10;                        label = { Text(&quot;Password&quot;) },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Lock,&#10;                                contentDescription = &quot;Password Icon&quot;,&#10;                                tint = Green600&#10;                            )&#10;                        },&#10;                        trailingIcon = {&#10;                            IconButton(onClick = { isPasswordVisible = !isPasswordVisible }) {&#10;                                Icon(&#10;                                    imageVector = if (isPasswordVisible) Icons.Default.Visibility else Icons.Default.VisibilityOff,&#10;                                    contentDescription = if (isPasswordVisible) &quot;Hide password&quot; else &quot;Show password&quot;,&#10;                                    tint = Green600&#10;                                )&#10;                            }&#10;                        },&#10;                        visualTransformation = if (isPasswordVisible) VisualTransformation.None else PasswordVisualTransformation(),&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = Green600,&#10;                            focusedLabelColor = Green600,&#10;                            focusedTextColor = Gray800,&#10;                            unfocusedTextColor = Gray700&#10;                        )&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                    // Sign In Button&#10;                    Button(&#10;                        onClick = {&#10;                            authViewModel.signIn(email, password)&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(50.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = Green600,&#10;                            disabledContainerColor = Green100,&#10;                            contentColor = Color.White,&#10;                            disabledContentColor = Color.White.copy(alpha = 0.5f)&#10;                        ),&#10;                        enabled = !uiState.isLoading &amp;&amp; email.isNotBlank() &amp;&amp; password.isNotBlank()&#10;                    ) {&#10;                        if (uiState.isLoading) {&#10;                            CircularProgressIndicator(&#10;                                color = Color.White, modifier = Modifier.size(20.dp)&#10;                            )&#10;                        } else {&#10;                            Text(&#10;                                text = &quot;Sign In&quot;, fontSize = 16.sp, fontWeight = FontWeight.Bold&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Divider&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        HorizontalDivider(&#10;                            modifier = Modifier.weight(1f),&#10;                            thickness = DividerDefaults.Thickness,&#10;                            color = DividerDefaults.color&#10;                        )&#10;                        Text(&#10;                            text = &quot;OR&quot;,&#10;                            modifier = Modifier.padding(horizontal = 16.dp),&#10;                            color = Gray500,&#10;                            style = MaterialTheme.typography.bodySmall&#10;                        )&#10;                        HorizontalDivider(modifier = Modifier.weight(1f))&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Google Sign In Button&#10;                    OutlinedButton(&#10;                        onClick = {&#10;                            authViewModel.signInWithGoogle()&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(50.dp),&#10;                        colors = ButtonDefaults.outlinedButtonColors(&#10;                            contentColor = Gray700&#10;                        ),&#10;                        enabled = !uiState.isLoading&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Continue with Google&quot;,&#10;                            fontSize = 16.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // Sign Up Link&#10;            Row(&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;Don't have an account? &quot;, color = Gray600&#10;                )&#10;                Text(&#10;                    text = &quot;Sign Up&quot;,&#10;                    color = Green600,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.clickable { onNavigateToSignUp() })&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;        }&#10;&#10;        // Error Snackbar&#10;        uiState.errorMessage?.let { message -&gt;&#10;            Snackbar(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(16.dp), action = {&#10;                    TextButton(onClick = { authViewModel.clearError() }) {&#10;                        Text(&quot;Dismiss&quot;)&#10;                    }&#10;                }) {&#10;                Text(message)&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;}" />
              <option name="updatedContent" value="package com.farmora.presentation.auth.login&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Email&#10;import androidx.compose.material.icons.filled.Lock&#10;import androidx.compose.material.icons.filled.Visibility&#10;import androidx.compose.material.icons.filled.VisibilityOff&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Divider&#10;import androidx.compose.material3.DividerDefaults&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.OutlinedTextFieldDefaults&#10;import androidx.compose.material3.Snackbar&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.input.VisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.farmora.domain.model.NetworkStatus&#10;import com.farmora.presentation.auth.AuthviewModel&#10;import com.farmora.presentation.components.OfflineBanner&#10;import com.farmora.ui.theme.Gray500&#10;import com.farmora.ui.theme.Gray600&#10;import com.farmora.ui.theme.Gray700&#10;import com.farmora.ui.theme.Gray800&#10;import com.farmora.ui.theme.Green100&#10;import com.farmora.ui.theme.Green50&#10;import com.farmora.ui.theme.Green600&#10;import com.farmora.ui.theme.Green800&#10;import com.farmora.ui.theme.Warning&#10;&#10;@Composable&#10;fun LoginScreen(&#10;    modifier: Modifier = Modifier,&#10;    onNavigateToSignUp: () -&gt; Unit,&#10;    onNavigateToHome: () -&gt; Unit,&#10;    authViewModel: AuthviewModel = hiltViewModel(),&#10;) {&#10;&#10;    val uiState by authViewModel.uiState.collectAsState()&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var isPasswordVisible by remember { mutableStateOf(false) }&#10;    LocalContext.current&#10;&#10;&#10;    // Navigate to home if logged in&#10;    LaunchedEffect(uiState.isLoggedIn) {&#10;        if (uiState.isLoggedIn) {&#10;            onNavigateToHome()&#10;        }&#10;    }&#10;&#10;    uiState.errorMessage?.let { message -&gt;&#10;        LaunchedEffect(message) {&#10;            authViewModel.clearError()&#10;        }&#10;    }&#10;&#10;&#10;    Box(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                brush = Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        Green100, Green50, Color.White&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp)&#10;                .verticalScroll(rememberScrollState()),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Spacer(modifier = Modifier.height(60.dp))&#10;&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;&#10;            Text(&#10;                text = &quot;Your Smart Farming Assistant&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                color = Green600,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier.padding(top = 8.dp, bottom = 48.dp)&#10;            )&#10;&#10;&#10;            // Login Form&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(), colors = CardDefaults.cardColors(&#10;                    containerColor = Color.White&#10;                ), elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Sign In&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        color = Green800,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 24.dp)&#10;                    )&#10;&#10;                    // Email Field&#10;                    OutlinedTextField(&#10;                        value = email,&#10;                        onValueChange = { email = it },&#10;                        label = { Text(&quot;Email Address&quot;) },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Email,&#10;                                contentDescription = &quot;Email Icon&quot;,&#10;                                tint = Green600&#10;                            )&#10;                        },&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email),&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = Green600,&#10;                            focusedLabelColor = Green600,&#10;                            focusedTextColor = Gray800,&#10;                            unfocusedTextColor = Gray700&#10;                        )&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Password Field&#10;                    OutlinedTextField(&#10;                        value = password,&#10;                        onValueChange = { password = it },&#10;                        label = { Text(&quot;Password&quot;) },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Lock,&#10;                                contentDescription = &quot;Password Icon&quot;,&#10;                                tint = Green600&#10;                            )&#10;                        },&#10;                        trailingIcon = {&#10;                            IconButton(onClick = { isPasswordVisible = !isPasswordVisible }) {&#10;                                Icon(&#10;                                    imageVector = if (isPasswordVisible) Icons.Default.Visibility else Icons.Default.VisibilityOff,&#10;                                    contentDescription = if (isPasswordVisible) &quot;Hide password&quot; else &quot;Show password&quot;,&#10;                                    tint = Green600&#10;                                )&#10;                            }&#10;                        },&#10;                        visualTransformation = if (isPasswordVisible) VisualTransformation.None else PasswordVisualTransformation(),&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = Green600,&#10;                            focusedLabelColor = Green600,&#10;                            focusedTextColor = Gray800,&#10;                            unfocusedTextColor = Gray700&#10;                        )&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                    // Sign In Button&#10;                    Button(&#10;                        onClick = {&#10;                            authViewModel.signIn(email, password)&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(50.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = Green600,&#10;                            disabledContainerColor = Green100,&#10;                            contentColor = Color.White,&#10;                            disabledContentColor = Color.White.copy(alpha = 0.5f)&#10;                        ),&#10;                        enabled = !uiState.isLoading &amp;&amp; email.isNotBlank() &amp;&amp; password.isNotBlank()&#10;                    ) {&#10;                        if (uiState.isLoading) {&#10;                            CircularProgressIndicator(&#10;                                color = Color.White, modifier = Modifier.size(20.dp)&#10;                            )&#10;                        } else {&#10;                            Text(&#10;                                text = &quot;Sign In&quot;, fontSize = 16.sp, fontWeight = FontWeight.Bold&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Divider&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        HorizontalDivider(&#10;                            modifier = Modifier.weight(1f),&#10;                            thickness = DividerDefaults.Thickness,&#10;                            color = DividerDefaults.color&#10;                        )&#10;                        Text(&#10;                            text = &quot;OR&quot;,&#10;                            modifier = Modifier.padding(horizontal = 16.dp),&#10;                            color = Gray500,&#10;                            style = MaterialTheme.typography.bodySmall&#10;                        )&#10;                        HorizontalDivider(modifier = Modifier.weight(1f))&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Google Sign In Button&#10;                    OutlinedButton(&#10;                        onClick = {&#10;                            authViewModel.signInWithGoogle()&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(50.dp),&#10;                        colors = ButtonDefaults.outlinedButtonColors(&#10;                            contentColor = Gray700&#10;                        ),&#10;                        enabled = !uiState.isLoading&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Continue with Google&quot;,&#10;                            fontSize = 16.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // Sign Up Link&#10;            Row(&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;Don't have an account? &quot;, color = Gray600&#10;                )&#10;                Text(&#10;                    text = &quot;Sign Up&quot;,&#10;                    color = Green600,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.clickable { onNavigateToSignUp() })&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;        }&#10;&#10;        // Error Snackbar&#10;        uiState.errorMessage?.let { message -&gt;&#10;            Snackbar(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(16.dp), action = {&#10;                    TextButton(onClick = { authViewModel.clearError() }) {&#10;                        Text(&quot;Dismiss&quot;)&#10;                    }&#10;                }) {&#10;                Text(message)&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/farmora/presentation/auth/signup/SignUpScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/farmora/presentation/auth/signup/SignUpScreen.kt" />
              <option name="originalContent" value="package com.farmora.presentation.auth.signup&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Email&#10;import androidx.compose.material.icons.filled.Lock&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Visibility&#10;import androidx.compose.material.icons.filled.VisibilityOff&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Divider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.OutlinedTextFieldDefaults&#10;import androidx.compose.material3.Snackbar&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.input.VisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.farmora.domain.model.NetworkStatus&#10;import com.farmora.presentation.auth.AuthviewModel&#10;import com.farmora.presentation.components.OfflineBanner&#10;import com.farmora.ui.theme.*&#10;&#10;@Composable&#10;fun SignUpScreen(&#10;    onNavigateToLogin: () -&gt; Unit,&#10;    onNavigateToHome: () -&gt; Unit,&#10;    authViewModel: AuthviewModel = hiltViewModel()&#10;) {&#10;&#10;    val uiState by authViewModel.uiState.collectAsState()&#10;    var name by remember { mutableStateOf(&quot;&quot;) }&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var confirmPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var isPasswordVisible by remember { mutableStateOf(false) }&#10;    var isConfirmPasswordVisible by remember { mutableStateOf(false) }&#10;    val context = LocalContext.current&#10;&#10;    LaunchedEffect(uiState.isLoggedIn) {&#10;        if (uiState.isLoggedIn) {&#10;            onNavigateToHome()&#10;        }&#10;    }&#10;&#10;    uiState.errorMessage?.let { message -&gt;&#10;        LaunchedEffect(message) {&#10;            authViewModel.clearError()&#10;        }&#10;    }&#10;&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                brush = Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        Orange100,&#10;                        Orange50,&#10;                        Color.White&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;&#10;        OfflineBanner(&#10;            isVisible = uiState.networkStatus == NetworkStatus.Unavailable,&#10;            modifier = Modifier.align(Alignment.TopCenter)&#10;        )&#10;&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp)&#10;                .verticalScroll(rememberScrollState()),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Spacer(modifier = Modifier.height(40.dp))&#10;&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            Text(&#10;                text = &quot;Join Farmora&quot;,&#10;                style = MaterialTheme.typography.headlineLarge,&#10;                color = Orange800,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Start your smart farming journey today&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                color = Orange600,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier.padding(top = 8.dp, bottom = 32.dp)&#10;            )&#10;&#10;&#10;            // Sign Up Form&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = Color.White&#10;                ),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Create Account&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        color = Orange800,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 24.dp)&#10;                    )&#10;&#10;                    // Name Field&#10;                    OutlinedTextField(&#10;                        value = name,&#10;                        onValueChange = { name = it },&#10;                        label = { Text(&quot;Full Name&quot;) },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Person,&#10;                                contentDescription = &quot;Name Icon&quot;,&#10;                                tint = Orange600&#10;                            )&#10;                        },&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text),&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = Orange600,&#10;                            focusedLabelColor = Orange600&#10;                        )&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Email Field&#10;                    OutlinedTextField(&#10;                        value = email,&#10;                        onValueChange = { email = it },&#10;                        label = { Text(&quot;Email Address&quot;) },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Email,&#10;                                contentDescription = &quot;Email Icon&quot;,&#10;                                tint = Orange600&#10;                            )&#10;                        },&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email),&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = Orange600,&#10;                            focusedLabelColor = Orange600&#10;                        )&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Password Field&#10;                    OutlinedTextField(&#10;                        value = password,&#10;                        onValueChange = { password = it },&#10;                        label = { Text(&quot;Password&quot;) },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Lock,&#10;                                contentDescription = &quot;Password Icon&quot;,&#10;                                tint = Orange600&#10;                            )&#10;                        },&#10;                        trailingIcon = {&#10;                            IconButton(onClick = { isPasswordVisible = !isPasswordVisible }) {&#10;                                Icon(&#10;                                    imageVector = if (isPasswordVisible) Icons.Default.Visibility else Icons.Default.VisibilityOff,&#10;                                    contentDescription = if (isPasswordVisible) &quot;Hide password&quot; else &quot;Show password&quot;,&#10;                                    tint = Orange600&#10;                                )&#10;                            }&#10;                        },&#10;                        visualTransformation = if (isPasswordVisible) VisualTransformation.None else PasswordVisualTransformation(),&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = Orange600,&#10;                            focusedLabelColor = Orange600&#10;                        )&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Confirm Password Field&#10;                    OutlinedTextField(&#10;                        value = confirmPassword,&#10;                        onValueChange = { confirmPassword = it },&#10;                        label = { Text(&quot;Confirm Password&quot;) },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Lock,&#10;                                contentDescription = &quot;Confirm Password Icon&quot;,&#10;                                tint = Orange600&#10;                            )&#10;                        },&#10;                        trailingIcon = {&#10;                            IconButton(onClick = { isConfirmPasswordVisible = !isConfirmPasswordVisible }) {&#10;                                Icon(&#10;                                    imageVector = if (isConfirmPasswordVisible) Icons.Default.Visibility else Icons.Default.VisibilityOff,&#10;                                    contentDescription = if (isConfirmPasswordVisible) &quot;Hide password&quot; else &quot;Show password&quot;,&#10;                                    tint = Orange600&#10;                                )&#10;                            }&#10;                        },&#10;                        visualTransformation = if (isConfirmPasswordVisible) VisualTransformation.None else PasswordVisualTransformation(),&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = Orange600,&#10;                            focusedLabelColor = Orange600&#10;                        ),&#10;                        isError = password.isNotEmpty() &amp;&amp; confirmPassword.isNotEmpty() &amp;&amp; password != confirmPassword&#10;                    )&#10;&#10;                    // Password validation feedback&#10;                    if (password.isNotEmpty() &amp;&amp; confirmPassword.isNotEmpty() &amp;&amp; password != confirmPassword) {&#10;                        Text(&#10;                            text = &quot;Passwords do not match&quot;,&#10;                            color = Error,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            modifier = Modifier.padding(start = 16.dp, top = 4.dp)&#10;                        )&#10;                    }&#10;&#10;                    if (password.isNotEmpty() &amp;&amp; password.length &lt; 8) {&#10;                        Text(&#10;                            text = &quot;Password must be at least 8 characters&quot;,&#10;                            color = Warning,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            modifier = Modifier.padding(start = 16.dp, top = 4.dp)&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                    // Sign Up Button&#10;                    Button(&#10;                        onClick = {&#10;                            authViewModel.signUp(email, password, confirmPassword, name)&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(50.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = Orange600&#10;                        ),&#10;                        enabled = !uiState.isLoading &amp;&amp;&#10;                                name.isNotBlank() &amp;&amp;&#10;                                email.isNotBlank() &amp;&amp;&#10;                                password.isNotBlank() &amp;&amp;&#10;                                confirmPassword.isNotBlank() &amp;&amp;&#10;                                password == confirmPassword &amp;&amp;&#10;                                password.length &gt;= 8&#10;                    ) {&#10;                        if (uiState.isLoading) {&#10;                            CircularProgressIndicator(&#10;                                color = Color.White,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                        } else {&#10;                            Text(&#10;                                text = &quot;Create Account&quot;,&#10;                                fontSize = 16.sp,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Divider&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Divider(modifier = Modifier.weight(1f))&#10;                        Text(&#10;                            text = &quot;OR&quot;,&#10;                            modifier = Modifier.padding(horizontal = 16.dp),&#10;                            color = Gray500,&#10;                            style = MaterialTheme.typography.bodySmall&#10;                        )&#10;                        Divider(modifier = Modifier.weight(1f))&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Google Sign Up Button&#10;                    OutlinedButton(&#10;                        onClick = {&#10;                            authViewModel.signInWithGoogle()&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(50.dp),&#10;                        colors = ButtonDefaults.outlinedButtonColors(&#10;                            contentColor = Gray700&#10;                        ),&#10;                        enabled = !uiState.isLoading&#10;                    ) {&#10;                        Text(&#10;                            text = &quot; Sign up with Google&quot;,&#10;                            fontSize = 16.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Sign In Link&#10;            Row(&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;Already have an account? &quot;,&#10;                    color = Gray600&#10;                )&#10;                Text(&#10;                    text = &quot;Sign In&quot;,&#10;                    color = Orange600,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.clickable { onNavigateToLogin() }&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;        }&#10;&#10;        // Error Snackbar&#10;        uiState.errorMessage?.let { message -&gt;&#10;            Snackbar(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(16.dp),&#10;                action = {&#10;                    TextButton(onClick = { authViewModel.clearError() }) {&#10;                        Text(&quot;Dismiss&quot;)&#10;                    }&#10;                }&#10;            ) {&#10;                Text(message)&#10;            }&#10;        }&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="package com.farmora.presentation.auth.signup&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Email&#10;import androidx.compose.material.icons.filled.Lock&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Visibility&#10;import androidx.compose.material.icons.filled.VisibilityOff&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.Divider&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.OutlinedTextFieldDefaults&#10;import androidx.compose.material3.Snackbar&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.input.VisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.farmora.domain.model.NetworkStatus&#10;import com.farmora.presentation.auth.AuthviewModel&#10;import com.farmora.presentation.components.OfflineBanner&#10;import com.farmora.ui.theme.*&#10;&#10;@Composable&#10;fun SignUpScreen(&#10;    onNavigateToLogin: () -&gt; Unit,&#10;    onNavigateToHome: () -&gt; Unit,&#10;    authViewModel: AuthviewModel = hiltViewModel()&#10;) {&#10;&#10;    val uiState by authViewModel.uiState.collectAsState()&#10;    var name by remember { mutableStateOf(&quot;&quot;) }&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var confirmPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    var isPasswordVisible by remember { mutableStateOf(false) }&#10;    var isConfirmPasswordVisible by remember { mutableStateOf(false) }&#10;    val context = LocalContext.current&#10;&#10;    LaunchedEffect(uiState.isLoggedIn) {&#10;        if (uiState.isLoggedIn) {&#10;            onNavigateToHome()&#10;        }&#10;    }&#10;&#10;    uiState.errorMessage?.let { message -&gt;&#10;        LaunchedEffect(message) {&#10;            authViewModel.clearError()&#10;        }&#10;    }&#10;&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                brush = Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        Orange100,&#10;                        Orange50,&#10;                        Color.White&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp)&#10;                .verticalScroll(rememberScrollState()),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Spacer(modifier = Modifier.height(40.dp))&#10;&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            Text(&#10;                text = &quot;Join Farmora&quot;,&#10;                style = MaterialTheme.typography.headlineLarge,&#10;                color = Orange800,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Start your smart farming journey today&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                color = Orange600,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier.padding(top = 8.dp, bottom = 32.dp)&#10;            )&#10;&#10;&#10;            // Sign Up Form&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = Color.White&#10;                ),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Create Account&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        color = Orange800,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 24.dp)&#10;                    )&#10;&#10;                    // Name Field&#10;                    OutlinedTextField(&#10;                        value = name,&#10;                        onValueChange = { name = it },&#10;                        label = { Text(&quot;Full Name&quot;) },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Person,&#10;                                contentDescription = &quot;Name Icon&quot;,&#10;                                tint = Orange600&#10;                            )&#10;                        },&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text),&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = Orange600,&#10;                            focusedLabelColor = Orange600&#10;                        )&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Email Field&#10;                    OutlinedTextField(&#10;                        value = email,&#10;                        onValueChange = { email = it },&#10;                        label = { Text(&quot;Email Address&quot;) },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Email,&#10;                                contentDescription = &quot;Email Icon&quot;,&#10;                                tint = Orange600&#10;                            )&#10;                        },&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email),&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = Orange600,&#10;                            focusedLabelColor = Orange600&#10;                        )&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Password Field&#10;                    OutlinedTextField(&#10;                        value = password,&#10;                        onValueChange = { password = it },&#10;                        label = { Text(&quot;Password&quot;) },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Lock,&#10;                                contentDescription = &quot;Password Icon&quot;,&#10;                                tint = Orange600&#10;                            )&#10;                        },&#10;                        trailingIcon = {&#10;                            IconButton(onClick = { isPasswordVisible = !isPasswordVisible }) {&#10;                                Icon(&#10;                                    imageVector = if (isPasswordVisible) Icons.Default.Visibility else Icons.Default.VisibilityOff,&#10;                                    contentDescription = if (isPasswordVisible) &quot;Hide password&quot; else &quot;Show password&quot;,&#10;                                    tint = Orange600&#10;                                )&#10;                            }&#10;                        },&#10;                        visualTransformation = if (isPasswordVisible) VisualTransformation.None else PasswordVisualTransformation(),&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = Orange600,&#10;                            focusedLabelColor = Orange600&#10;                        )&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Confirm Password Field&#10;                    OutlinedTextField(&#10;                        value = confirmPassword,&#10;                        onValueChange = { confirmPassword = it },&#10;                        label = { Text(&quot;Confirm Password&quot;) },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Lock,&#10;                                contentDescription = &quot;Confirm Password Icon&quot;,&#10;                                tint = Orange600&#10;                            )&#10;                        },&#10;                        trailingIcon = {&#10;                            IconButton(onClick = { isConfirmPasswordVisible = !isConfirmPasswordVisible }) {&#10;                                Icon(&#10;                                    imageVector = if (isConfirmPasswordVisible) Icons.Default.Visibility else Icons.Default.VisibilityOff,&#10;                                    contentDescription = if (isConfirmPasswordVisible) &quot;Hide password&quot; else &quot;Show password&quot;,&#10;                                    tint = Orange600&#10;                                )&#10;                            }&#10;                        },&#10;                        visualTransformation = if (isConfirmPasswordVisible) VisualTransformation.None else PasswordVisualTransformation(),&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = OutlinedTextFieldDefaults.colors(&#10;                            focusedBorderColor = Orange600,&#10;                            focusedLabelColor = Orange600&#10;                        ),&#10;                        isError = password.isNotEmpty() &amp;&amp; confirmPassword.isNotEmpty() &amp;&amp; password != confirmPassword&#10;                    )&#10;&#10;                    // Password validation feedback&#10;                    if (password.isNotEmpty() &amp;&amp; confirmPassword.isNotEmpty() &amp;&amp; password != confirmPassword) {&#10;                        Text(&#10;                            text = &quot;Passwords do not match&quot;,&#10;                            color = Error,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            modifier = Modifier.padding(start = 16.dp, top = 4.dp)&#10;                        )&#10;                    }&#10;&#10;                    if (password.isNotEmpty() &amp;&amp; password.length &lt; 8) {&#10;                        Text(&#10;                            text = &quot;Password must be at least 8 characters&quot;,&#10;                            color = Warning,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            modifier = Modifier.padding(start = 16.dp, top = 4.dp)&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                    // Sign Up Button&#10;                    Button(&#10;                        onClick = {&#10;                            authViewModel.signUp(email, password, confirmPassword, name)&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(50.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = Orange600&#10;                        ),&#10;                        enabled = !uiState.isLoading &amp;&amp;&#10;                                name.isNotBlank() &amp;&amp;&#10;                                email.isNotBlank() &amp;&amp;&#10;                                password.isNotBlank() &amp;&amp;&#10;                                confirmPassword.isNotBlank() &amp;&amp;&#10;                                password == confirmPassword &amp;&amp;&#10;                                password.length &gt;= 8&#10;                    ) {&#10;                        if (uiState.isLoading) {&#10;                            CircularProgressIndicator(&#10;                                color = Color.White,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                        } else {&#10;                            Text(&#10;                                text = &quot;Create Account&quot;,&#10;                                fontSize = 16.sp,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Divider&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        HorizontalDivider(modifier = Modifier.weight(1f))&#10;                        Text(&#10;                            text = &quot;OR&quot;,&#10;                            modifier = Modifier.padding(horizontal = 16.dp),&#10;                            color = Gray500,&#10;                            style = MaterialTheme.typography.bodySmall&#10;                        )&#10;                        HorizontalDivider(modifier = Modifier.weight(1f))&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Google Sign Up Button&#10;                    OutlinedButton(&#10;                        onClick = {&#10;                            authViewModel.signInWithGoogle()&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(50.dp),&#10;                        colors = ButtonDefaults.outlinedButtonColors(&#10;                            contentColor = Gray700&#10;                        ),&#10;                        enabled = !uiState.isLoading&#10;                    ) {&#10;                        Text(&#10;                            text = &quot; Sign up with Google&quot;,&#10;                            fontSize = 16.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Sign In Link&#10;            Row(&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;Already have an account? &quot;,&#10;                    color = Gray600&#10;                )&#10;                Text(&#10;                    text = &quot;Sign In&quot;,&#10;                    color = Orange600,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.clickable { onNavigateToLogin() }&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;        }&#10;&#10;        // Error Snackbar&#10;        uiState.errorMessage?.let { message -&gt;&#10;            Snackbar(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(16.dp),&#10;                action = {&#10;                    TextButton(onClick = { authViewModel.clearError() }) {&#10;                        Text(&quot;Dismiss&quot;)&#10;                    }&#10;                }&#10;            ) {&#10;                Text(message)&#10;            }&#10;        }&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/farmora/presentation/components/GlobalOfflineBannerWrapper.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/farmora/presentation/components/GlobalOfflineBannerWrapper.kt" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.farmora.presentation.components&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.farmora.domain.model.NetworkStatus&#10;import com.farmora.presentation.auth.AuthviewModel&#10;&#10;@Composable&#10;fun GlobalOfflineBannerWrapper(&#10;    content: @Composable () -&gt; Unit,&#10;    authViewModel: AuthviewModel = hiltViewModel()&#10;) {&#10;    val uiState by authViewModel.uiState.collectAsState()&#10;&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;        // Global offline banner that appears at the top and pushes content down&#10;        OfflineBanner(&#10;            isVisible = uiState.networkStatus == NetworkStatus.Unavailable&#10;        )&#10;&#10;        // Main content below the banner&#10;        content()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/farmora/presentation/components/OfflineBanner.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/farmora/presentation/components/OfflineBanner.kt" />
              <option name="originalContent" value="package com.farmora.presentation.components&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.animation.slideOutVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.WifiOff&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;@Composable&#10;fun OfflineBanner(&#10;    isVisible: Boolean,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    AnimatedVisibility(&#10;        visible = isVisible,&#10;        enter = slideInVertically(initialOffsetY = { -it }),&#10;        exit = slideOutVertically(targetOffsetY = { -it }),&#10;        modifier = modifier&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(Color(0xFF2D2D2D)) // Dark gray similar to Duolingo&#10;                .padding(horizontal = 16.dp, vertical = 12.dp)&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically, horizontalArrangement = Arrangement.Center,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.WifiOff,&#10;                    contentDescription = &quot;No internet&quot;,&#10;                    tint = Color.White,&#10;                    modifier = Modifier&#10;                        .size(20.dp)&#10;                        .padding(end = 8.dp)&#10;                )&#10;                Text(&#10;                    text = &quot;You're offline&quot;,&#10;                    color = Color.White,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.farmora.presentation.components&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.animation.slideOutVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.WindowInsets&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.statusBars&#10;import androidx.compose.foundation.layout.windowInsetsPadding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.WifiOff&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;@Composable&#10;fun OfflineBanner(&#10;    isVisible: Boolean,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    AnimatedVisibility(&#10;        visible = isVisible,&#10;        enter = slideInVertically(initialOffsetY = { -it }),&#10;        exit = slideOutVertically(targetOffsetY = { -it }),&#10;        modifier = modifier&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(Color(0xFF2D2D2D)) // Dark gray similar to Duolingo - starts from very top&#10;        ) {&#10;            // Content positioned after status bar&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.Center,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .windowInsetsPadding(WindowInsets.statusBars) // Only content respects status bar&#10;                    .padding(horizontal = 16.dp, vertical = 12.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.WifiOff,&#10;                    contentDescription = &quot;No internet&quot;,&#10;                    tint = Color.White,&#10;                    modifier = Modifier&#10;                        .size(20.dp)&#10;                        .padding(end = 8.dp)&#10;                )&#10;                Text(&#10;                    text = &quot;You're offline&quot;,&#10;                    color = Color.White,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>